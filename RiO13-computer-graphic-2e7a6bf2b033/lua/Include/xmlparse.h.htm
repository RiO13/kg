<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0093)http://www.opensource.apple.com/source/apache/apache-643/apache/src/lib/expat-lite/xmlparse.h -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>xmlparse.h</title>
<style type="text/css">
.enscript-comment { font-style: italic; color: rgb(178,34,34); }
.enscript-function-name { font-weight: bold; color: rgb(0,0,255); }
.enscript-variable-name { font-weight: bold; color: rgb(184,134,11); }
.enscript-keyword { font-weight: bold; color: rgb(160,32,240); }
.enscript-reference { font-weight: bold; color: rgb(95,158,160); }
.enscript-string { font-weight: bold; color: rgb(188,143,143); }
.enscript-builtin { font-weight: bold; color: rgb(218,112,214); }
.enscript-type { font-weight: bold; color: rgb(34,139,34); }
.enscript-highlight { text-decoration: underline; color: 0; }
</style>
</head>
<body id="top">
<h1 style="margin:8px;" id="f1">xmlparse.h&nbsp;&nbsp;&nbsp;<span style="font-weight: normal; font-size: 0.5em;">[<a href="http://www.opensource.apple.com/source/apache/apache-643/apache/src/lib/expat-lite/xmlparse.h?txt">plain text</a>]</span></h1>
<hr>
<div></div>
<pre><span class="enscript-comment">/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
<a href="http://www.mozilla.org/MPL/">http://www.mozilla.org/MPL/</a>

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/</span>

#<span class="enscript-reference">ifndef</span> <span class="enscript-variable-name">XmlParse_INCLUDED</span>
#<span class="enscript-reference">define</span> <span class="enscript-variable-name">XmlParse_INCLUDED</span> 1

#<span class="enscript-reference">ifdef</span> <span class="enscript-variable-name">__cplusplus</span>
<span class="enscript-type">extern</span> <span class="enscript-string">"C"</span> {
#<span class="enscript-reference">endif</span>

#<span class="enscript-reference">ifndef</span> <span class="enscript-variable-name">XMLPARSEAPI</span>
#<span class="enscript-reference">define</span> <span class="enscript-variable-name">XMLPARSEAPI</span> <span class="enscript-comment">/* as nothing */</span>
#<span class="enscript-reference">endif</span>

<span class="enscript-type">typedef</span> <span class="enscript-type">void</span> *XML_Parser;

#<span class="enscript-reference">ifdef</span> <span class="enscript-variable-name">XML_UNICODE_WCHAR_T</span>

<span class="enscript-comment">/* XML_UNICODE_WCHAR_T will work only if sizeof(wchar_t) == 2 and wchar_t
uses Unicode. */</span>
<span class="enscript-comment">/* Information is UTF-16 encoded as wchar_ts */</span>

#<span class="enscript-reference">ifndef</span> <span class="enscript-variable-name">XML_UNICODE</span>
#<span class="enscript-reference">define</span> <span class="enscript-variable-name">XML_UNICODE</span>
#<span class="enscript-reference">endif</span>

#<span class="enscript-reference">include</span> <span class="enscript-string">&lt;stddef.h&gt;</span>
<span class="enscript-type">typedef</span> wchar_t XML_Char;
<span class="enscript-type">typedef</span> wchar_t XML_LChar;

#<span class="enscript-reference">else</span> <span class="enscript-comment">/* not XML_UNICODE_WCHAR_T */</span>

#<span class="enscript-reference">ifdef</span> <span class="enscript-variable-name">XML_UNICODE</span>

<span class="enscript-comment">/* Information is UTF-16 encoded as unsigned shorts */</span>
<span class="enscript-type">typedef</span> <span class="enscript-type">unsigned</span> <span class="enscript-type">short</span> XML_Char;
<span class="enscript-type">typedef</span> <span class="enscript-type">char</span> XML_LChar;

#<span class="enscript-reference">else</span> <span class="enscript-comment">/* not XML_UNICODE */</span>

<span class="enscript-comment">/* Information is UTF-8 encoded. */</span>
<span class="enscript-type">typedef</span> <span class="enscript-type">char</span> XML_Char;
<span class="enscript-type">typedef</span> <span class="enscript-type">char</span> XML_LChar;

#<span class="enscript-reference">endif</span> <span class="enscript-comment">/* not XML_UNICODE */</span>

#<span class="enscript-reference">endif</span> <span class="enscript-comment">/* not XML_UNICODE_WCHAR_T */</span>


<span class="enscript-comment">/* Constructs a new parser; encoding is the encoding specified by the external
protocol or null if there is none specified. */</span>

XML_Parser XMLPARSEAPI
<span class="enscript-function-name">XML_ParserCreate</span>(<span class="enscript-type">const</span> XML_Char *encoding);

<span class="enscript-comment">/* Constructs a new parser and namespace processor.  Element type names
and attribute names that belong to a namespace will be expanded;
unprefixed attribute names are never expanded; unprefixed element type
names are expanded only if there is a default namespace. The expanded
name is the concatenation of the namespace URI, the namespace separator character,
and the local part of the name.  If the namespace separator is '\0' then
the namespace URI and the local part will be concatenated without any
separator.  When a namespace is not declared, the name and prefix will be
passed through without expansion. */</span>

XML_Parser XMLPARSEAPI
<span class="enscript-function-name">XML_ParserCreateNS</span>(<span class="enscript-type">const</span> XML_Char *encoding, XML_Char namespaceSeparator);


<span class="enscript-comment">/* atts is array of name/value pairs, terminated by 0;
   names and values are 0 terminated. */</span>

<span class="enscript-type">typedef</span> <span class="enscript-function-name">void</span> (*XML_StartElementHandler)(<span class="enscript-type">void</span> *userData,
					<span class="enscript-type">const</span> XML_Char *name,
					<span class="enscript-type">const</span> XML_Char **atts);

<span class="enscript-type">typedef</span> <span class="enscript-function-name">void</span> (*XML_EndElementHandler)(<span class="enscript-type">void</span> *userData,
				      <span class="enscript-type">const</span> XML_Char *name);

<span class="enscript-comment">/* s is not 0 terminated. */</span>
<span class="enscript-type">typedef</span> <span class="enscript-function-name">void</span> (*XML_CharacterDataHandler)(<span class="enscript-type">void</span> *userData,
					 <span class="enscript-type">const</span> XML_Char *s,
					 <span class="enscript-type">int</span> len);

<span class="enscript-comment">/* target and data are 0 terminated */</span>
<span class="enscript-type">typedef</span> <span class="enscript-function-name">void</span> (*XML_ProcessingInstructionHandler)(<span class="enscript-type">void</span> *userData,
						 <span class="enscript-type">const</span> XML_Char *target,
						 <span class="enscript-type">const</span> XML_Char *data);

<span class="enscript-comment">/* data is 0 terminated */</span>
<span class="enscript-type">typedef</span> <span class="enscript-function-name">void</span> (*XML_CommentHandler)(<span class="enscript-type">void</span> *userData, <span class="enscript-type">const</span> XML_Char *data);

<span class="enscript-type">typedef</span> <span class="enscript-function-name">void</span> (*XML_StartCdataSectionHandler)(<span class="enscript-type">void</span> *userData);
<span class="enscript-type">typedef</span> <span class="enscript-function-name">void</span> (*XML_EndCdataSectionHandler)(<span class="enscript-type">void</span> *userData);

<span class="enscript-comment">/* This is called for any characters in the XML document for
which there is no applicable handler.  This includes both
characters that are part of markup which is of a kind that is
not reported (comments, markup declarations), or characters
that are part of a construct which could be reported but
for which no handler has been supplied. The characters are passed
exactly as they were in the XML document except that
they will be encoded in UTF-8.  Line boundaries are not normalized.
Note that a byte order mark character is not passed to the default handler.
There are no guarantees about how characters are divided between calls
to the default handler: for example, a comment might be split between
multiple calls. */</span>

<span class="enscript-type">typedef</span> <span class="enscript-function-name">void</span> (*XML_DefaultHandler)(<span class="enscript-type">void</span> *userData,
				   <span class="enscript-type">const</span> XML_Char *s,
				   <span class="enscript-type">int</span> len);

<span class="enscript-comment">/* This is called for a declaration of an unparsed (NDATA)
entity.  The base argument is whatever was set by XML_SetBase.
The entityName, systemId and notationName arguments will never be null.
The other arguments may be. */</span>

<span class="enscript-type">typedef</span> <span class="enscript-function-name">void</span> (*XML_UnparsedEntityDeclHandler)(<span class="enscript-type">void</span> *userData,
					      <span class="enscript-type">const</span> XML_Char *entityName,
					      <span class="enscript-type">const</span> XML_Char *base,
					      <span class="enscript-type">const</span> XML_Char *systemId,
					      <span class="enscript-type">const</span> XML_Char *publicId,
					      <span class="enscript-type">const</span> XML_Char *notationName);

<span class="enscript-comment">/* This is called for a declaration of notation.
The base argument is whatever was set by XML_SetBase.
The notationName will never be null.  The other arguments can be. */</span>

<span class="enscript-type">typedef</span> <span class="enscript-function-name">void</span> (*XML_NotationDeclHandler)(<span class="enscript-type">void</span> *userData,
					<span class="enscript-type">const</span> XML_Char *notationName,
					<span class="enscript-type">const</span> XML_Char *base,
					<span class="enscript-type">const</span> XML_Char *systemId,
					<span class="enscript-type">const</span> XML_Char *publicId);

<span class="enscript-comment">/* When namespace processing is enabled, these are called once for
each namespace declaration. The call to the start and end element
handlers occur between the calls to the start and end namespace
declaration handlers. For an xmlns attribute, prefix will be null.
For an xmlns="" attribute, uri will be null. */</span>

<span class="enscript-type">typedef</span> <span class="enscript-function-name">void</span> (*XML_StartNamespaceDeclHandler)(<span class="enscript-type">void</span> *userData,
					      <span class="enscript-type">const</span> XML_Char *prefix,
					      <span class="enscript-type">const</span> XML_Char *uri);

<span class="enscript-type">typedef</span> <span class="enscript-function-name">void</span> (*XML_EndNamespaceDeclHandler)(<span class="enscript-type">void</span> *userData,
					    <span class="enscript-type">const</span> XML_Char *prefix);

<span class="enscript-comment">/* This is called if the document is not standalone (it has an
external subset or a reference to a parameter entity, but does not
have standalone="yes"). If this handler returns 0, then processing
will not continue, and the parser will return a
XML_ERROR_NOT_STANDALONE error. */</span>

<span class="enscript-type">typedef</span> <span class="enscript-function-name">int</span> (*XML_NotStandaloneHandler)(<span class="enscript-type">void</span> *userData);

<span class="enscript-comment">/* This is called for a reference to an external parsed general entity.
The referenced entity is not automatically parsed.
The application can parse it immediately or later using
XML_ExternalEntityParserCreate.
The parser argument is the parser parsing the entity containing the reference;
it can be passed as the parser argument to XML_ExternalEntityParserCreate.
The systemId argument is the system identifier as specified in the entity declaration;
it will not be null.
The base argument is the system identifier that should be used as the base for
resolving systemId if systemId was relative; this is set by XML_SetBase;
it may be null.
The publicId argument is the public identifier as specified in the entity declaration,
or null if none was specified; the whitespace in the public identifier
will have been normalized as required by the XML spec.
The context argument specifies the parsing context in the format
expected by the context argument to
XML_ExternalEntityParserCreate; context is valid only until the handler
returns, so if the referenced entity is to be parsed later, it must be copied.
The handler should return 0 if processing should not continue because of
a fatal error in the handling of the external entity.
In this case the calling parser will return an XML_ERROR_EXTERNAL_ENTITY_HANDLING
error.
Note that unlike other handlers the first argument is the parser, not userData. */</span>

<span class="enscript-type">typedef</span> <span class="enscript-function-name">int</span> (*XML_ExternalEntityRefHandler)(XML_Parser parser,
					    <span class="enscript-type">const</span> XML_Char *context,
					    <span class="enscript-type">const</span> XML_Char *base,
					    <span class="enscript-type">const</span> XML_Char *systemId,
					    <span class="enscript-type">const</span> XML_Char *publicId);

<span class="enscript-comment">/* This structure is filled in by the XML_UnknownEncodingHandler
to provide information to the parser about encodings that are unknown
to the parser.
The map[b] member gives information about byte sequences
whose first byte is b.
If map[b] is c where c is &gt;= 0, then b by itself encodes the Unicode scalar value c.
If map[b] is -1, then the byte sequence is malformed.
If map[b] is -n, where n &gt;= 2, then b is the first byte of an n-byte
sequence that encodes a single Unicode scalar value.
The data member will be passed as the first argument to the convert function.
The convert function is used to convert multibyte sequences;
s will point to a n-byte sequence where map[(unsigned char)*s] == -n.
The convert function must return the Unicode scalar value
represented by this byte sequence or -1 if the byte sequence is malformed.
The convert function may be null if the encoding is a single-byte encoding,
that is if map[b] &gt;= -1 for all bytes b.
When the parser is finished with the encoding, then if release is not null,
it will call release passing it the data member;
once release has been called, the convert function will not be called again.

Expat places certain restrictions on the encodings that are supported
using this mechanism.

1. Every ASCII character that can appear in a well-formed XML document,
other than the characters

  $@\^`{}~

must be represented by a single byte, and that byte must be the
same byte that represents that character in ASCII.

2. No character may require more than 4 bytes to encode.

3. All characters encoded must have Unicode scalar values &lt;= 0xFFFF,
(ie characters that would be encoded by surrogates in UTF-16
are  not allowed).  Note that this restriction doesn't apply to
the built-in support for UTF-8 and UTF-16.

4. No Unicode character may be encoded by more than one distinct sequence
of bytes. */</span>

<span class="enscript-type">typedef</span> <span class="enscript-type">struct</span> {
  <span class="enscript-type">int</span> map[256];
  <span class="enscript-type">void</span> *data;
  <span class="enscript-type">int</span> (*convert)(<span class="enscript-type">void</span> *data, <span class="enscript-type">const</span> <span class="enscript-type">char</span> *s);
  <span class="enscript-type">void</span> (*release)(<span class="enscript-type">void</span> *data);
} XML_Encoding;

<span class="enscript-comment">/* This is called for an encoding that is unknown to the parser.
The encodingHandlerData argument is that which was passed as the
second argument to XML_SetUnknownEncodingHandler.
The name argument gives the name of the encoding as specified in
the encoding declaration.
If the callback can provide information about the encoding,
it must fill in the XML_Encoding structure, and return 1.
Otherwise it must return 0.
If info does not describe a suitable encoding,
then the parser will return an XML_UNKNOWN_ENCODING error. */</span>

<span class="enscript-type">typedef</span> <span class="enscript-function-name">int</span> (*XML_UnknownEncodingHandler)(<span class="enscript-type">void</span> *encodingHandlerData,
					  <span class="enscript-type">const</span> XML_Char *name,
					  XML_Encoding *info);

<span class="enscript-type">void</span> XMLPARSEAPI
<span class="enscript-function-name">XML_SetElementHandler</span>(XML_Parser parser,
		      XML_StartElementHandler start,
		      XML_EndElementHandler end);

<span class="enscript-type">void</span> XMLPARSEAPI
<span class="enscript-function-name">XML_SetCharacterDataHandler</span>(XML_Parser parser,
			    XML_CharacterDataHandler handler);

<span class="enscript-type">void</span> XMLPARSEAPI
<span class="enscript-function-name">XML_SetProcessingInstructionHandler</span>(XML_Parser parser,
				    XML_ProcessingInstructionHandler handler);
<span class="enscript-type">void</span> XMLPARSEAPI
<span class="enscript-function-name">XML_SetCommentHandler</span>(XML_Parser parser,
                      XML_CommentHandler handler);

<span class="enscript-type">void</span> XMLPARSEAPI
<span class="enscript-function-name">XML_SetCdataSectionHandler</span>(XML_Parser parser,
			   XML_StartCdataSectionHandler start,
			   XML_EndCdataSectionHandler end);

<span class="enscript-comment">/* This sets the default handler and also inhibits expansion of internal entities.
The entity reference will be passed to the default handler. */</span>

<span class="enscript-type">void</span> XMLPARSEAPI
<span class="enscript-function-name">XML_SetDefaultHandler</span>(XML_Parser parser,
		      XML_DefaultHandler handler);

<span class="enscript-comment">/* This sets the default handler but does not inhibit expansion of internal entities.
The entity reference will not be passed to the default handler. */</span>

<span class="enscript-type">void</span> XMLPARSEAPI
<span class="enscript-function-name">XML_SetDefaultHandlerExpand</span>(XML_Parser parser,
		            XML_DefaultHandler handler);

<span class="enscript-type">void</span> XMLPARSEAPI
<span class="enscript-function-name">XML_SetUnparsedEntityDeclHandler</span>(XML_Parser parser,
				 XML_UnparsedEntityDeclHandler handler);

<span class="enscript-type">void</span> XMLPARSEAPI
<span class="enscript-function-name">XML_SetNotationDeclHandler</span>(XML_Parser parser,
			   XML_NotationDeclHandler handler);

<span class="enscript-type">void</span> XMLPARSEAPI
<span class="enscript-function-name">XML_SetNamespaceDeclHandler</span>(XML_Parser parser,
			    XML_StartNamespaceDeclHandler start,
			    XML_EndNamespaceDeclHandler end);

<span class="enscript-type">void</span> XMLPARSEAPI
<span class="enscript-function-name">XML_SetNotStandaloneHandler</span>(XML_Parser parser,
			    XML_NotStandaloneHandler handler);

<span class="enscript-type">void</span> XMLPARSEAPI
<span class="enscript-function-name">XML_SetExternalEntityRefHandler</span>(XML_Parser parser,
				XML_ExternalEntityRefHandler handler);

<span class="enscript-comment">/* If a non-null value for arg is specified here, then it will be passed
as the first argument to the external entity ref handler instead
of the parser object. */</span>
<span class="enscript-type">void</span> XMLPARSEAPI
<span class="enscript-function-name">XML_SetExternalEntityRefHandlerArg</span>(XML_Parser, <span class="enscript-type">void</span> *arg);

<span class="enscript-type">void</span> XMLPARSEAPI
<span class="enscript-function-name">XML_SetUnknownEncodingHandler</span>(XML_Parser parser,
			      XML_UnknownEncodingHandler handler,
			      <span class="enscript-type">void</span> *encodingHandlerData);

<span class="enscript-comment">/* This can be called within a handler for a start element, end element,
processing instruction or character data.  It causes the corresponding
markup to be passed to the default handler. */</span>
<span class="enscript-type">void</span> XMLPARSEAPI <span class="enscript-function-name">XML_DefaultCurrent</span>(XML_Parser parser);

<span class="enscript-comment">/* This value is passed as the userData argument to callbacks. */</span>
<span class="enscript-type">void</span> XMLPARSEAPI
<span class="enscript-function-name">XML_SetUserData</span>(XML_Parser parser, <span class="enscript-type">void</span> *userData);

<span class="enscript-comment">/* Returns the last value set by XML_SetUserData or null. */</span>
#<span class="enscript-reference">define</span> <span class="enscript-function-name">XML_GetUserData</span>(parser) (*(void **)(parser))

<span class="enscript-comment">/* This is equivalent to supplying an encoding argument
to XML_CreateParser. It must not be called after XML_Parse
or XML_ParseBuffer. */</span>

<span class="enscript-type">int</span> XMLPARSEAPI
<span class="enscript-function-name">XML_SetEncoding</span>(XML_Parser parser, <span class="enscript-type">const</span> XML_Char *encoding);

<span class="enscript-comment">/* If this function is called, then the parser will be passed
as the first argument to callbacks instead of userData.
The userData will still be accessible using XML_GetUserData. */</span>

<span class="enscript-type">void</span> XMLPARSEAPI
<span class="enscript-function-name">XML_UseParserAsHandlerArg</span>(XML_Parser parser);

<span class="enscript-comment">/* Sets the base to be used for resolving relative URIs in system identifiers in
declarations.  Resolving relative identifiers is left to the application:
this value will be passed through as the base argument to the
XML_ExternalEntityRefHandler, XML_NotationDeclHandler
and XML_UnparsedEntityDeclHandler. The base argument will be copied.
Returns zero if out of memory, non-zero otherwise. */</span>

<span class="enscript-type">int</span> XMLPARSEAPI
<span class="enscript-function-name">XML_SetBase</span>(XML_Parser parser, <span class="enscript-type">const</span> XML_Char *base);

<span class="enscript-type">const</span> XML_Char XMLPARSEAPI *
<span class="enscript-function-name">XML_GetBase</span>(XML_Parser parser);

<span class="enscript-comment">/* Returns the number of the attributes passed in last call to the
XML_StartElementHandler that were specified in the start-tag rather
than defaulted. */</span>

<span class="enscript-type">int</span> XMLPARSEAPI <span class="enscript-function-name">XML_GetSpecifiedAttributeCount</span>(XML_Parser parser);

<span class="enscript-comment">/* Parses some input. Returns 0 if a fatal error is detected.
The last call to XML_Parse must have isFinal true;
len may be zero for this call (or any other). */</span>
<span class="enscript-type">int</span> XMLPARSEAPI
<span class="enscript-function-name">XML_Parse</span>(XML_Parser parser, <span class="enscript-type">const</span> <span class="enscript-type">char</span> *s, <span class="enscript-type">int</span> len, <span class="enscript-type">int</span> isFinal);

<span class="enscript-type">void</span> XMLPARSEAPI *
<span class="enscript-function-name">XML_GetBuffer</span>(XML_Parser parser, <span class="enscript-type">int</span> len);

<span class="enscript-type">int</span> XMLPARSEAPI
<span class="enscript-function-name">XML_ParseBuffer</span>(XML_Parser parser, <span class="enscript-type">int</span> len, <span class="enscript-type">int</span> isFinal);

<span class="enscript-comment">/* Creates an XML_Parser object that can parse an external general entity;
context is a '\0'-terminated string specifying the parse context;
encoding is a '\0'-terminated string giving the name of the externally specified encoding,
or null if there is no externally specified encoding.
The context string consists of a sequence of tokens separated by formfeeds (\f);
a token consisting of a name specifies that the general entity of the name
is open; a token of the form prefix=uri specifies the namespace for a particular
prefix; a token of the form =uri specifies the default namespace.
This can be called at any point after the first call to an ExternalEntityRefHandler
so longer as the parser has not yet been freed.
The new parser is completely independent and may safely be used in a separate thread.
The handlers and userData are initialized from the parser argument.
Returns 0 if out of memory.  Otherwise returns a new XML_Parser object. */</span>
XML_Parser XMLPARSEAPI
<span class="enscript-function-name">XML_ExternalEntityParserCreate</span>(XML_Parser parser,
			       <span class="enscript-type">const</span> XML_Char *context,
			       <span class="enscript-type">const</span> XML_Char *encoding);

<span class="enscript-type">enum</span> XML_Error {
  XML_ERROR_NONE,
  XML_ERROR_NO_MEMORY,
  XML_ERROR_SYNTAX,
  XML_ERROR_NO_ELEMENTS,
  XML_ERROR_INVALID_TOKEN,
  XML_ERROR_UNCLOSED_TOKEN,
  XML_ERROR_PARTIAL_CHAR,
  XML_ERROR_TAG_MISMATCH,
  XML_ERROR_DUPLICATE_ATTRIBUTE,
  XML_ERROR_JUNK_AFTER_DOC_ELEMENT,
  XML_ERROR_PARAM_ENTITY_REF,
  XML_ERROR_UNDEFINED_ENTITY,
  XML_ERROR_RECURSIVE_ENTITY_REF,
  XML_ERROR_ASYNC_ENTITY,
  XML_ERROR_BAD_CHAR_REF,
  XML_ERROR_BINARY_ENTITY_REF,
  XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF,
  XML_ERROR_MISPLACED_XML_PI,
  XML_ERROR_UNKNOWN_ENCODING,
  XML_ERROR_INCORRECT_ENCODING,
  XML_ERROR_UNCLOSED_CDATA_SECTION,
  XML_ERROR_EXTERNAL_ENTITY_HANDLING,
  XML_ERROR_NOT_STANDALONE
};

<span class="enscript-comment">/* If XML_Parse or XML_ParseBuffer have returned 0, then XML_GetErrorCode
returns information about the error. */</span>

<span class="enscript-type">enum</span> XML_Error XMLPARSEAPI <span class="enscript-function-name">XML_GetErrorCode</span>(XML_Parser parser);

<span class="enscript-comment">/* These functions return information about the current parse location.
They may be called when XML_Parse or XML_ParseBuffer return 0;
in this case the location is the location of the character at which
the error was detected.
They may also be called from any other callback called to report
some parse event; in this the location is the location of the first
of the sequence of characters that generated the event. */</span>

<span class="enscript-type">int</span> XMLPARSEAPI <span class="enscript-function-name">XML_GetCurrentLineNumber</span>(XML_Parser parser);
<span class="enscript-type">int</span> XMLPARSEAPI <span class="enscript-function-name">XML_GetCurrentColumnNumber</span>(XML_Parser parser);
<span class="enscript-type">long</span> XMLPARSEAPI <span class="enscript-function-name">XML_GetCurrentByteIndex</span>(XML_Parser parser);

<span class="enscript-comment">/* Return the number of bytes in the current event.
Returns 0 if the event is in an internal entity. */</span>

<span class="enscript-type">int</span> XMLPARSEAPI <span class="enscript-function-name">XML_GetCurrentByteCount</span>(XML_Parser parser);

<span class="enscript-comment">/* For backwards compatibility with previous versions. */</span>
#<span class="enscript-reference">define</span> <span class="enscript-variable-name">XML_GetErrorLineNumber</span> XML_GetCurrentLineNumber
#<span class="enscript-reference">define</span> <span class="enscript-variable-name">XML_GetErrorColumnNumber</span> XML_GetCurrentColumnNumber
#<span class="enscript-reference">define</span> <span class="enscript-variable-name">XML_GetErrorByteIndex</span> XML_GetCurrentByteIndex

<span class="enscript-comment">/* Frees memory used by the parser. */</span>
<span class="enscript-type">void</span> XMLPARSEAPI
<span class="enscript-function-name">XML_ParserFree</span>(XML_Parser parser);

<span class="enscript-comment">/* Returns a string describing the error. */</span>
<span class="enscript-type">const</span> XML_LChar XMLPARSEAPI *<span class="enscript-function-name">XML_ErrorString</span>(<span class="enscript-type">int</span> code);

#<span class="enscript-reference">ifdef</span> <span class="enscript-variable-name">__cplusplus</span>
}
#<span class="enscript-reference">endif</span>

#<span class="enscript-reference">endif</span> <span class="enscript-comment">/* not XmlParse_INCLUDED */</span>
</pre>
<hr>
</body></html>